
loadPlugin("TensorPhylo", "/mnt/c/Users/ammon_work/Desktop/phylogenetics_software/tensorPhylo/tensorphyloprototype/build/installer/lib")
sim_num = 7

tree = readTrees("timescale_sim" + sim_num + ".location_tree.nexus")[1]
#tree = readTrees("example_bdp_origin.nex")[1]
taxa = tree.taxa()

data = readDiscreteCharacterData("timescale_sim" + sim_num + ".location_tree.nexus")
k    = data.getStateDescriptions().size()
#num_locs = 4
#k = num_locs

# set parameters
age <- tree.rootAge() + tree.branchLength(tree.nnodes())

moves = VectorMoves()

# make the tensors


for(i in 1:k){
	lambda[i] ~ dnExponential(1)
	moves.append(mvScale(lambda[i]))
	lambda[i].setValue(0.1)
}

#epsilon ~ dnBeta(1,1)
#moves[2] = mvBetaProbability(epsilon)
#mu_param := lambda_param * epsilon
#mu_param ~ dnUniform(4,12)
#moves.append(mvSlide(mu_param))
#mu     := rep(mu_param, k)
mu <- rep(1.01, k)

# mass-event parameters
rho <- 0.00000000000000000001
# sampling rate param

for(i in 1:k){
	delta[i] ~ dnExponential(1)
	moves.append(mvScale(delta[i]))
	delta[i].setValue(0.05)
}

# anagenetic events
for(i in 1:choose(k,2)){
	m[i] ~ dnExponential(1)
	moves.append(mvScale(m[i]))
	m[i].setValue(0.01)
}
eta := fnFreeSymmetricRateMatrix(m, rescaled = FALSE)

# Assymetric rates model
#for(i in 1:k){
#	for(j in 1:k){
#		if( i == j){
#			m[i][j] <- 0
#		}else{
#			m[i][j] ~ dnExponential(1)
#			moves.append(mvScale(m[i][j]))
#			#m[i][j].setValue(0.001)
#		}
#	} 
#}
#eta := fnFreeK(m, rescaled = FALSE)


root_freq <- simplex(rep(1, k))

# condition
#condition <- "sampled"
condition <- "time"
#condition <- "survival"

# distribution object. also called dnGLHBDSP()
psi ~ dnGeneralizedLineageHeterogeneousBirthDeathProcess(
                originAge      = age,
				pi			 = root_freq,
                lambda       = lambda,
				eta          = eta,
				mu           = mu,
                delta        = delta,
				rho          = rho,
				condition    = condition,
                taxa         = taxa,
				nStates		 = k,
				nProc		 = 1
)
psi.clamp(tree)
psi.clampCharData(data)

# model
my_model = model(psi)

# monitors
monitors = VectorMonitors()
monitors.append(mnScreen(printgen=100))
monitors.append(mnModel(printgen=1, filename="output/sim" + sim_num + "_tp.log"))
#monitors.append(mnFile(root_state, filename="output/mrate_sim" + sim_num + "_location_" + i + "_tp.log"))

# analysis
my_mcmc = mcmc(my_model, monitors, moves)
my_mcmc.burnin(1000, 100)
my_mcmc.run(10000)


q()








