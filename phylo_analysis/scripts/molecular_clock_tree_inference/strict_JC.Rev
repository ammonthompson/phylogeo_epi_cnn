

alignment_file = "fuck_sim0.nexus"

data <- readDiscreteCharacterData(alignment_file)

## helpers
n_taxa <- data.size()
taxa <- data.taxa()

moves = VectorMoves()
monitors = VectorMonitors()

##############
# Tree prior #
##############
# Define exponential priors on the birth rate and death rate #
speciation_rate ~ dnExponential(10)
extinction_rate ~ dnExponential(10)

# Specify a scale move on the rate params #
moves.append( mvScale(speciation_rate, lambda=0.5,tune=true,weight=3.0) )
moves.append( mvScale(extinction_rate, lambda=0.5,tune=true,weight=3.0) )

# Create deterministic nodes for the diversification and turnover rates to monitor these parameters #
diversification := speciation_rate - extinction_rate
turnover := extinction_rate/speciation_rate

# Fix the probability of sampling parameter (rho) to 1 # Fix later
rho <- 1.0

# Fix the age of the root to 0 #
extant_mrca <- 0.0

# Define the tree-prior distribution as the birth-death process #
timetree ~ dnBDP(lambda=speciation_rate, mu=extinction_rate, rho=rho, rootAge=extant_mrca, samplingStrategy="uniform", condition="nTaxa", taxa=taxa)

# Specify moves on the tree and node times #
moves.append( mvNarrow(timetree, weight=n_taxa) )
moves.append( mvFNPR(timetree, weight=n_taxa/4.0) )
moves.append( mvNodeTimeSlideUniform(timetree, weight=n_taxa) )
moves.append( mvSubtreeScale(timetree, weight=n_taxa/5.0) )

#################
# Clock model ###
#################

# assume a strict clock drawn from an exponential prior #
branch_rates ~ dnExponential(10.0)


# Substitution model
Q <- fnJC(4)

# the sequence evolution model
seq ~ dnPhyloCTMC(tree = timetree, Q=Q, branchRates = branch_rates, type="DNA")

# attach the data
seq.clamp(data)



########
# MCMC #
########

# initialize the model object #
mymodel = model(branch_rates)


# Create a vector of monitors #
# 1. for the full model #
monitors.append( mnModel(filename="output/bears_global.log", printgen=10) )

# 2. the tree #
monitors.append( mnFile(filename="output/bears_global.trees", printgen=10, timetree) )

# 3. and a few select parameters to be printed to the screen #
monitors.append( mnScreen(printgen=100, extant_mrca, diversification) )

# Initialize the MCMC object #
mymcmc = mcmc(mymodel, monitors, moves, nruns=2, combine="mixed")

# Run the MCMC #
mymcmc.run(generations=20000, tuningInterval=200)




########################
# Summarizing the tree #
########################

# Read the trace file #
trace = readTreeTrace("output/bears_global.trees")

# Maximum clade credibility tree #
mccTree(trace, file="output/bears_global.mcc.tre" )

# Quit RevBayes #
q()

